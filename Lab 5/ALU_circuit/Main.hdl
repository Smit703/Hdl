CHIP Main{
    IN x[8], y[8], c[3], US;
    OUT z[8], OF, EQ;

    PARTS:
//Comparing the two inputs
   comparator(x0 = x[0],x1 = x[1], x2 = x[2], x3 = x[3],x4 = x[4], x5 = x[5], x6 = x[6],x7 = x[7],y0 = y[0],y1 = y[1], y2 = y[2], y3 = y[3],y4 = y[4], y5 = y[5], y6 = y[6],y7 = y[7], z = EQ);

//Or operation
    Or(a= x[0], b=y[0], out= O0);
    Or(a= x[1], b=y[1], out= O1);
    Or(a= x[2], b=y[2], out= O2);
    Or(a= x[3], b=y[3], out= O3);
    Or(a= x[4], b=y[4], out= O4);
    Or(a= x[5], b=y[5], out= O5);
    Or(a= x[6], b=y[6], out= O6);
    Or(a= x[7], b=y[7], out= O7);
//And operation
    And(a= x[0], b=y[0], out= A0);
    And(a= x[1], b=y[1], out= A1);
    And(a= x[2], b=y[2], out= A2);
    And(a= x[3], b=y[3], out= A3);
    And(a= x[4], b=y[4], out= A4);
    And(a= x[5], b=y[5], out= A5);
    And(a= x[6], b=y[6], out= A6);
    And(a= x[7], b=y[7], out= A7);
//Xor operation
    Xor(a= x[0], b=y[0], out= X0);
    Xor(a= x[1], b=y[1], out= X1);
    Xor(a= x[2], b=y[2], out= X2);
    Xor(a= x[3], b=y[3], out= X3);
    Xor(a= x[4], b=y[4], out= X4); 
    Xor(a= x[5], b=y[5], out= X5);
    Xor(a= x[6], b=y[6], out= X6);
    Xor(a= x[7], b=y[7], out= X7);

//Adder
   bas(x = x, y = y, AS = false, Z[0] = Ad0, Z[1] = Ad1, Z[2] = Ad2, Z[3] = Ad3, Z[4] = Ad4, Z[5] = Ad5, Z[6] = Ad6, Z[7] = Ad7, OFSAS = AOFS, OFUAS = AOFU);

//Subtracter
   bas(x = x, y = y, AS = true, Z[0] = Su0, Z[1] = Su1, Z[2] = Su2, Z[3] = Su3, Z[4] = Su4, Z[5] = Su5, Z[6] = Su6, Z[7] = Su7, OFSAS = SOFS, OFUAS = SOFU);

//Unsigned Multiplier
   Multiplier(x = x, y = y, zero = false, P[0] = UM0, P[1] = UM1, P[2] = UM2, P[3] = UM3, P[4] = UM4, P[5] = UM5, P[6] = UM6, P[7] = UM7, OF = MOFU);

//Signed Multiplier
   Multipliers(x = x, y = y, zero = false, P[0] = SM0, P[1] = SM1, P[2] =SM2, P[3] = SM3, P[4] = SM4, P[5] = SM5, P[6] = SM6, P[7] = SM7, OF = MOFS);

//1st MUX
   fourtoonemux(x1[0] = A0, x1[1] = A1, x1[2] = A2, x1[3] = A3, x1[4] = A4,x1[5] = A5, x1[6] = A6, x1[7] = A7, x2[0] = O0, x2[1] = O1, x2[2] = O2, x2[3] = O3, x2[4] = O4,x2[5] = O5, x2[6] = O6, x2[7] = O7, x3[0] = X0, x3[1] = X1, x3[2] = X2, x3[3] = X3, x3[4] = X4,x3[5] = X5, x3[6] = X6, x3[7] = X7, s0 = c[0], s1 = c[1], y[0] = F0, y[1] = F1, y[2] = F2, y[3] = F3, y[4] = F4,y[5] = F5, y[6] = F6, y[7] = F7);

//2nd MUX
   fourtoonemux(x0[0] = Ad0, x0[1] = Ad1, x0[2] = Ad2, x0[3] = Ad3, x0[4] = Ad4,x0[5] = Ad5, x0[6] = Ad6, x0[7] = Ad7,x1[0] = Su0, x1[1] = Su1, x1[2] = Su2, x1[3] = Su3, x1[4] = Su4,x1[5] = Su5, x1[6] = Su6, x1[7] = Su7,x2[0] = UM0, x2[1] = UM1, x2[2] = UM2, x2[3] = UM3, x2[4] = UM4,x2[5] = UM5, x2[6] = UM6, x2[7] = UM7,x3[0] = SM0, x3[1] = SM1, x3[2] = SM2, x3[3] = SM3, x3[4] = SM4,x3[5] = SM5, x3[6] = SM6, x3[7] = SM7,s0 = c[0], s1 = c[1], y[0] = G0, y[1] = G1, y[2] = G2, y[3] = G3, y[4] = G4,y[5] = G5, y[6] = G6, y[7] = G7);

//2 to 1 MUX to get final answer
   twotoonemux(x0[0] = F0, x0[1] = F1, x0[2] = F2, x0[3] = F3, x0[4] = F4,x0[5] = F5, x0[6] = F6, x0[7] = F7,x1[0] = G0, x1[1] = G1, x1[2] = G2, x1[3] = G3, x1[4] = G4,x1[5] = G5, x1[6] = G6, x1[7] = G7, s1 = c[2], y = z);

//Overflow Bit generation
   Not(in = c[0], out = notc0);
   And(a = c[0], b= SOFS, out = t1);
   And(a = notc0, b= AOFS, out = t2);
   Or(a = t1, b = t2, out = OFSAS);

   And(a = c[0], b= SOFU, out = t3);
   And(a = notc0, b= AOFU, out = t4);
   Or(a = t3, b = t4, out = OFUAS);

   overflow(us = US, OFSAS =OFSAS, OFUAS = OFUAS, OFUM = MOFU, OFSM = MOFS, s0 = c[0], s1 = c[1], s2 = c[2], y = OF);

}