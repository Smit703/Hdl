CHIP HackCPU {

        IN  inM[16], instruction[16], reset;	
        OUT outM[16], writeM, addressM[15], pc[15];	

        PARTS:
    
	mux(x0=a, x1=inM, s=instruction[12], y=ALU2);   //to select the req output
	HackALU(x=d, y=ALU2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=calc, zr=zr, ng=ng);
	
        And(a=instruction[15], b=instruction[4], out=DLoad);
	DRegister(in=calc, load=DLoad, out=d);

	mux(x0=instruction, x1=calc, s=instruction[15], y=Ain);
	And(a=instruction[15], b=instruction[5], out=A1);
	Not(in=instruction[15], out=A2);
	Or(a=A1, b=A2, out=AL);

	ARegister(in=Ain, load=AL, out=a, out[0..14]=addressM);

	And(a=instruction[15], b=instruction[3], out=writeM);
	And(a=instruction[2], b=ng, out=j1);
	And(a=instruction[1], b=zr, out=j2);
	Or(a=ng, b=zr, out=nlnot);
	Not(in=nlnot, out=nl);
	And(a=instruction[0], b=nl, out=j3);	
	Or3(a=j1, b=j2, c=j3, out=jmp1);
	And(a=jmp1, b=instruction[15], out=jmp);
	Not(in=jmp, out=inc);

	PC(in=a, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
}

